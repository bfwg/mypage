type Image implements Node {
  id: ID!
  url: String
  createTime: String
}

type ImageConnection {
  pageInfo: PageInfo!
  edges: [ImageEdge]
}

type ImageEdge {
  node: Image
  cursor: String!
}

input IntroduceImageInput {
  imageName: String!
  clientMutationId: String!
}

type IntroduceImagePayload {
  newImageEdge: ImageEdge
  User: User
  clientMutationId: String!
}

type Mutation {
  introduceImage(input: IntroduceImageInput!): IntroduceImagePayload
  changeUserStatus(input: UpdateUserStatusInput!): UpdateUserStatusPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  User: User
  node(id: ID!): Node
}

input UpdateUserStatusInput {
  userData: String!
  clientMutationId: String!
}

type UpdateUserStatusPayload {
  User: User
  clientMutationId: String!
}

type User implements Node {
  id: ID!
  username: String
  images(after: String, first: Int, before: String, last: Int): ImageConnection
}
